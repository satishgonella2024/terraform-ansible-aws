pipeline {
    agent any
    parameters {
        choice(
            name: 'ACTION',
            choices: ['create-only', 'destroy-only', 'destroy-and-create'],
            description: 'Select the action to perform: Create-only, Destroy-only, or Destroy-and-Create.'
        )
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-credentials') // Replace with your Jenkins AWS credentials ID
        AWS_SECRET_ACCESS_KEY = credentials('aws-credentials')
    }
    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    echo 'Cleaning workspace...'
                    cleanWs() // Clean workspace
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                script {
                    echo 'Installing dependencies...'
                    sh '''
                    apt-get update && apt-get install -y python3 python3-pip git bash curl || exit 1
                    '''
                }
            }
        }
        stage('Checkout Code') {
            steps {
                echo 'Checking out code...'
                git branch: 'main',
                    url: 'git@github.com:satishgonella2024/terraform-ansible-aws.git' // Replace with your GitHub repo URL
            }
        }
        stage('Checkov - Security and Compliance') {
            steps {
                dir('terraform/live/dev') {
                    echo 'Running Checkov...'
                    sh '''
                    python3 -m venv checkov-venv || exit 1
                    . checkov-venv/bin/activate
                    pip install --upgrade pip setuptools wheel || exit 1
                    pip install checkov || exit 1
                    checkov -d . || true
                    '''
                }
            }
        }
        stage('Terraform Destroy') {
            when {
                expression { params.ACTION == 'destroy-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    echo 'Destroying Terraform resources...'
                    sh 'terraform destroy -auto-approve || exit 1'
                }
            }
        }
        stage('Terraform Init') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    echo 'Initializing Terraform...'
                    sh 'terraform init || exit 1'
                }
            }
        }
        stage('Terratest') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/terratest') {
                    echo 'Running Terratest...'
                    sh '''
                    go mod tidy || exit 1
                    go test -v || exit 1
                    '''
                }
            }
        }
        stage('Terraform Plan') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    echo 'Planning Terraform changes...'
                    sh 'terraform plan -out=tfplan || exit 1'
                }
                script {
                    if (fileExists('terraform/live/dev/tfplan')) {
                        echo 'Terraform plan file created successfully.'
                    } else {
                        error "Terraform plan file 'tfplan' not found!"
                    }
                }
            }
        }
        stage('Approval') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                script {
                    dir('terraform/live/dev') {
                        def summary = sh(
                            script: 'terraform show -no-color tfplan | grep -E "^(Plan|\\+|\\-|~)"',
                            returnStdout: true
                        ).trim()
                        def additions = summary.split('\n').count { it.startsWith('+') }
                        def deletions = summary.split('\n').count { it.startsWith('-') }
                        def changes = summary.split('\n').count { it.startsWith('~') }
                        def humanReadable = "Summary:\nAdditions: ${additions}\nDeletions: ${deletions}\nChanges: ${changes}\n\nDetails:\n${summary}"
                        input message: "Approve Terraform plan?\n\n${humanReadable}"
                    }
                }
            }
        }
        stage('Terraform Apply') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    echo 'Applying Terraform changes...'
                    sh 'terraform apply -auto-approve tfplan || exit 1'
                }
            }
        }
        stage('Capture Terraform Outputs') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    script {
                        echo 'Capturing Terraform outputs...'
                        sh '''
                        terraform output -json > terraform_outputs.json || exit 1
                        '''
                        archiveArtifacts artifacts: 'terraform_outputs.json'
                    }
                }
            }
        }
        stage('State Validation') {
            steps {
                script {
                    dir('terraform/live/dev') {
                        echo 'Validating Terraform state...'
                        sh 'terraform state list || exit 1'
                        echo 'State validation complete.'
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline complete!'
        }
        cleanup {
            dir('terraform/live/dev') {
                echo 'Cleaning up Terraform plan...'
                sh 'rm -f tfplan || exit 1'
            }
            echo 'Cleanup stage complete!'
        }
    }
}