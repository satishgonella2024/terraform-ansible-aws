pipeline {
    agent any
    parameters {
        choice(
            name: 'ACTION',
            choices: ['create-only', 'destroy-only', 'destroy-and-create'],
            description: 'Select the action to perform: Create-only, Destroy-only, or Destroy-and-Create.'
        )
    }
    environment {
        TERRAFORM_DIR = 'terraform/live/dev'
        AWS_ACCESS_KEY_ID = credentials('aws-credentials')
        AWS_SECRET_ACCESS_KEY = credentials('aws-credentials')
    }
    stages {
        stage('Prepare Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'git@github.com:satishgonella2024/terraform-ansible-aws.git'
            }
        }
        stage('Validation') {
            parallel {
                stage('Checkov') {
                    steps {
                        dir("${env.TERRAFORM_DIR}") {
                            sh '''
                            python3 -m venv checkov-venv || exit 1
                            . checkov-venv/bin/activate
                            pip install checkov || exit 1
                            checkov -d . || true
                            '''
                        }
                    }
                }
                stage('Terratest') {
                    steps {
                        dir('terraform/terratest') {
                            sh '''
                            go mod tidy || exit 1
                            go test -v || exit 1
                            '''
                        }
                    }
                }
            }
        }
        stage('Terraform Init & Plan') {
            steps {
                dir("${env.TERRAFORM_DIR}") {
                    sh 'terraform init || exit 1'
                    sh 'terraform plan -out=tfplan || exit 1'
                }
            }
        }
        stage('Approval') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                script {
                    def summary = sh(
                        script: 'terraform show -no-color tfplan | grep -E "^(Plan|\\+|\\-|~)"',
                        returnStdout: true
                    ).trim()
                    input message: "Review and Approve Terraform Plan:\n${summary}"
                }
            }
        }
        stage('Terraform Apply') {
            steps {
                dir("${env.TERRAFORM_DIR}") {
                    sh 'terraform apply -auto-approve tfplan || exit 1'
                }
            }
        }
        stage('Capture Outputs') {
            steps {
                dir("${env.TERRAFORM_DIR}") {
                    sh 'terraform output -json > terraform_outputs.json'
                    archiveArtifacts artifacts: 'terraform_outputs.json'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline complete!'
        }
    }
}