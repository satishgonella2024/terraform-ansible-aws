pipeline {
    agent any
    parameters {
        choice(
            name: 'ACTION',
            choices: ['create-only', 'destroy-only', 'destroy-and-create'],
            description: 'Select the action to perform: Create-only, Destroy-only, or Destroy-and-Create.'
        )
    }
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-credentials') // Replace with your Jenkins AWS credentials ID
        AWS_SECRET_ACCESS_KEY = credentials('aws-credentials')
    }
    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    cleanWs() // Clean workspace
                    sh '''
                    # Ensure necessary directories exist
                    mkdir -p terraform/live/dev/../../ansible
                    '''
                }
            }
        }
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    url: 'git@github.com:satishgonella2024/terraform-ansible-aws.git' // Replace with your GitHub repo URL
            }
        }
        stage('Checkov - Security and Compliance') {
            steps {
                dir('terraform/live/dev') {
                    sh '''
                    python3 -m venv checkov-venv
                    . checkov-venv/bin/activate
                    pip install --upgrade pip setuptools wheel
                    pip install checkov
                    checkov -d . || true
                    '''
                }
            }
        }
        stage('Terraform Destroy') {
            when {
                expression { params.ACTION == 'destroy-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    sh 'terraform destroy -auto-approve'
                }
            }
        }
        stage('Terraform Init') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    sh 'terraform init'
                }
            }
        }
        stage('Terratest') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/terratest') {
                    sh '''
                    go mod tidy
                    go test -v
                    '''
                }
            }
        }
        stage('Terraform Plan') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    sh 'terraform plan -out=tfplan'
                }
                script {
                    if (fileExists('terraform/live/dev/tfplan')) {
                        echo 'Terraform plan file created successfully.'
                    } else {
                        error "Terraform plan file 'tfplan' not found!"
                    }
                }
            }
        }
        stage('Approval') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                script {
                    dir('terraform/live/dev') {
                        def summary = sh(
                            script: 'terraform show -no-color tfplan | grep -E "^(Plan|\\+|\\-|~)"',
                            returnStdout: true
                        ).trim()
                        def additions = summary.split('\n').count { it.startsWith('+') }
                        def deletions = summary.split('\n').count { it.startsWith('-') }
                        def changes = summary.split('\n').count { it.startsWith('~') }
                        def humanReadable = "Summary:\nAdditions: ${additions}\nDeletions: ${deletions}\nChanges: ${changes}\n\nDetails:\n${summary}"
                        input message: "Approve Terraform plan?\n\n${humanReadable}"
                    }
                }
            }
        }
        stage('Terraform Apply') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
        stage('Capture Terraform Outputs') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('terraform/live/dev') {
                    script {
                        // Ensure the ansible directory exists before writing to it
                        sh '''
                        // if [ ! -d "../ansible" ]; then
                        //     mkdir -p ../ansible
                        // fi
                        terraform output -json > ../../../ansible/terraform_outputs.json
                        '''
                    }
                }
            }
        }
        stage('Generate Dynamic Ansible Inventory') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                dir('ansible') {
                    script {
                        // Generate the inventory.yaml dynamically
                        sh '''
                        python3 <<EOF
import json
import yaml
with open("terraform_outputs.json") as f:
    outputs = json.load(f)
hosts = outputs["instance_ip"]["value"]
inventory = {
    "all": {
        "hosts": {
            host: {"ansible_user": "ubuntu"} for host in hosts
        }
    }
}
with open("inventory.yaml", "w") as f:
    yaml.dump(inventory, f)
EOF
                        '''
                    }
                }
            }
        }
        stage('Configure WordPress with Ansible') {
            when {
                expression { params.ACTION == 'create-only' || params.ACTION == 'destroy-and-create' }
            }
            steps {
                script {
                    dir('ansible') {
                        sh '''
                        ansible-playbook -i inventory.yaml wordpress-playbook.yaml
                        '''
                    }
                }
            }
        }
        stage('State Validation') {
            steps {
                script {
                    dir('terraform/live/dev') {
                        sh 'terraform state list'
                        echo 'State validation complete.'
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline complete!'
        }
        cleanup {
            dir('terraform/live/dev') {
                sh 'rm -f tfplan'
            }
            echo 'Cleanup stage complete!'
        }
    }
}
